一、
1、判断变量是否为相应类型，例如判断变量a是否为整数，if（a==int（））
2、取一个数的不同位的方法：例如153，取其个位数：取模于10；
                                            取其十位数：先除以10，再取模，
                                            取百位数：除以100。
3、不同的数据类型所占的内存大小：整型：int 4；short 1；long 4；long long 8
                              实型：double 8；float 4
                              字符型：char 1
                              字符串型：40
4、数组、函数、指针的综合运用：例题，对于一个数组进行升序排列，数组为int arr[4]={2,4,1,5}
   解法：
#include<iostream>
#include"1.h"
using namespace std;

int app(int*arr, int len) {                                 //注意这里的参数列表的int*arr可以改为int arr[]，这两者意思有所不同第一种是告诉编译器有这么一个地址
	for (int i = 0; i < len-1; i++) {                   //使得编译器可在之后的编译过程中进行调用，第二种则是直接告诉编译器这里要输出的是一个数组，如果在调用
 		for (int j = 0; j < len-i-1; j++) {         //时使用其它类型编译器会报错实参与形参不兼容。
			if (arr[j] > arr[j+1]) {
				int temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
	}
	return 0;
}
int main() {
	int blue[4] = { 2,4,1,5 };
	int o = sizeof(blue) / sizeof(blue[0]);
	app(blue, o);
	for (int j = 0; j < 4; j++) {
		cout << blue[j] << endl;
	}
}
二、通讯目录（太长了不方便摘录，写一写经验）
1、在创建函数的时候可以引用其它函数。
2、在Switch选择结构中，在case:中输入内容过长时或要在此中初始化变量则需要在case：后加{}将内容输入在花括号中。
3、在命名函数里定义一个变量可以不初始化它的值，当然也可以在其中在函数中定义一个数据，但是这里的数据并不能再函数的外面使用，它只能用在该函数里。
4、system（“cls”）清屏操作，但不会影响之后的循环输出。
5、在函数调用结构体时，一般调用他的指针，这样可以对结构体的值进行修改，当然如果不需要修改则用：结构体[]来使用，防止误操作，更改数值。
三、进制的转化
1、二进制转十进制：例如，1011转化为十进制为1*2^0+1*2^1+0*2^2+1*2^3=11,
   八进制转十进制：与二进制类似，但是2变成了8。
   十六进制转十进制：与二进制类似，但是2变成了16，且从11开始变成了A,B,C,D,E,F,G转化时直接用数字计算即可
2、十进制转二进制、八进制、十六机制：将十进制的数除以相对应的进制数，如转化为二进制则需要除以二，一直除到不能再除，将余数从后往前排，注意十六进制要11以上的数要转化为字母
3、二进制转化为八进制：将二进制数以每三位为一组，进行相加，注意每一组要从2的0次方开始算。
     二进制转化为十六进制：将二进制数以每四位为一组，进行相加，足以每一组要从2的零次方开始算，且大于十一要转化为字母




二、程序的内存模型
    1、内存4区：（代码区和全局区是存放程序运行前划分的两个区域，栈区和堆区是程序运行后才会划分的两个区域）
                      （1）代码区：作用是用来存放二进制代码，由操作系统进行管理的，存放CPU执行的机器指令
                                  特点：代码区是共享的，目的是为了对于频繁被执行的程序，只需要在内存中有一段代码即可。比如你点开的一个可执行的代码乘区，它会生成相应的代码，当你多次点击它，也只会生成一次代码。
                                        代码区是只读的，目的是为了防止程序意外的修改它的指令。
                       （2）全局区：作用是存放全局变量和静态变量及常量。其中常量区又分为字符串常量和其它常量，其它常量指的是用const修饰的变量
                                            注意该区域的数据是由操作系统释放的，即操作系统决定该数据的生死。
                                            1、在main函数中定义的变量称为局部变量，在外面的称为全局变量。从两者的地址可以看出两者不在一个区域中
                                            2、字符串常量：在双引号中的内容
                                            3、const修饰的常量：可分为const修饰全局变量，修饰局部变量 ，在对于const修饰的变量命名时可以采用c_l_名称，其中的“l”代表局部变量，用"g"的话为全局 
                                            3、静态变量的格式是在普通变量的前面加上static。    
                                                 注意：全局变量、静态变量、字符常量、const修饰的全局变量的地址挨得很近；而局部变量和const修饰的局部变量的地址很接近
                      （3）栈区：1、特点是编译器自动分配释放，存放函数的参数值，局部变量等
                                                       2、局部变量指的是在函数体内的变量，主要是main函数中；
                                                       3、注意事项：栈区的数据在函数执行完之后，编译器会自动释放函数中的参数值和局部变量，以此来释放内存空间，不过其并不会在执行完函数时立即释放，而是随后一阵才会删除。
                                                       4、栈区的数据并不会因为函数的多次调用而延长生命周期，在每一次调用函数时，函数都会新建一个栈区，将函数中的变量和参数值存入到新的栈上，在执行完后会再次释放。
                                                       5、注意指针本质上也是一个局部变量，也存放在栈区，可以指向不同区的地址
                                     （4）堆区：1、由程序员分配数据，若程序员不释放，程序结束时系统会自动回收，
                                                       2、创建一个堆区的数据：new 变量类型（数据），其创建好后，其返回的是该数据的地址，因此需要指针去接收，否则直接输出的是数据的地址而不是变量本身。一般在创建堆区数据的时候会用一个特定的指针去指向他，避免混淆，以及之后的释放。
                                                       3、堆区数据的释放：delete 特定的指针名或是直接加栈区数据本身，注意！注意！一定要在释放特定指针后，对其悬空化，然后如果后续需要，可以让其重新指向另一个变量地址，否则会出现野指针
                                                       4、在堆区创建一个数组：new 数据类型[]，；这里的[]中的是包含元素的个数。在释放数组的时候：delete [] 指针名;这里的[]告诉他你要是放的是一个数组，释放数组中某一特定的元素，则是delete 指向某一数组的指针名 [2],意思是释放某一堆区数组的某一元素，这是也要让其变为悬空指针。
  2、引用：（1）给一个变量起别名。引用只是一个对已存在的变量的标识符，它们与原始变量共享相同的内存空间，因此不会增加内存使用量。
               语法：数据类型 &别名=原名。
               注意！注意！注意！再对已经定义的变量修改数据值的时候，不需要再在前面加数据类型，同时在用引用进行修改时也不要加“&”。
               引用的注意事项：一般的变量可以未初始化变量，但是未初始化的变量是不可以直接进行输出的，同时引用不能未初始化变量。例如，int a;a=15;int &b;&b=a;这段在执行时第二个会报错。
          （2）引用只能被初始化一次，即别名一旦起好，这个别名只能被用作这个变量的别名，不能再用给其他变量当别名，例如int a=10;int b=20;int &c=a;int &c=b;此时系统会报错，提示c被重新定义，多次初始化，不过如果想要修改c的值变为b，可以直接c=b，不过这里的意思是将a变为20；而c又是a的别名，因此c也变为20；  
          （3）引用与函数参数：通过对于原来章节的了解，值传递无法用形参改变实参，地址传递可以，此时学习了引用便可以实现和地址传递一样的效果。例如,
void exchange2(int& num1, int& num2) {
	int temp;
	temp = num1;
	num1 = num2;
	num2 = temp;
	cout << num1 << num2 << endl;
int main(){
      int a=10;
      int b=15;
      int &c=a;
   int &d=b;
 exchange2(a,b)             //这里无论输入变量原名，还是别名都可以实现形参改变实参的效果。
cout<<a<<b<<endl;
           原理：例子中函数中的num1和num2是别名，当输入a，b变量时相当于num1与num2变为a，b的别名，在函数中对其进行修改，相当于修改了a，b本身，但由于a，b在函数式子外，因此会改变，而值传递不能做到的原因是，值传递的函数中输入变量时，函数参数会拷贝一份在函数中进行操作，并不会对变量本身进行修改。
                   引用不能做函数的返回值，例如：int &ret(){int a=15;int &b=a;return b},这是在main函数中int c=ret（），此时去输出c时挥发现，在输出几次c后变回出现输出乱码的情况，这是因为a为局部变量，在函数结束调用时被释放，此时b没有当做别名的变量。此时会报错。如果将将函数主体改为
int &ex() {
    static int a = 15;
	return a；
}
这时由于变量a变为静态变量，不会在函数调用完后消亡，这时返回a的别名，再在main函数中区用变量去被其赋值，这时去修改变量，并不会影响函数的返回值，而此时可以对于函数的返回值进行直接修改，即函数可以调用为左值。如果去掉int &ex()中的“&”则不能把函数当做可修改的左值。
（4）引用的一些注意事项：指针不能直接指向引用，因为引用只是对于变量的一个别名，没有独立的内存空间对其进行分配，所以其地址说白了是其引用变量的地址，所以指针指向的是引用引用的变量的地址。
 （5）常量引用：利用const来引用一些数值等，当想要去引用一些数值如10；但是10为自变量，不能被直接引用，而在前面加入一段const便可以引用，其可以理解为编译器自动帮你建立起了一个临时变量，再引用该临时变量。这时引用时只读的，不能被再次赋值。
                        使用场景：修饰形参，防止误操作。比如创建一个函数，在参数列表中使用常量引用，此时如果在函数内对于引用的对象进行修改，则会报错，防止误操作。
三、函数高级
1、函数的默认参数：即函数在参数列表中允许拥有默认值，例如int exm（int a=10,int b）{},这时在调用函数的时候，可以只在参数列表中输入一个初始值，在使用的过程中，可以在函数中直接是使用默认参数，如果你输入了两个初始值，则其会覆盖掉原来的初始值。注意！在默认数值开始，自左向右必须都有默认值，即使是实型，子母型，字符串型都要遵循。
                              在函数声明中有参数的默认值，则实现上则不能有，相反，实现中有，声明中不可以有，即使完全相同。
2、函数的重载：即两个及以上的函数名相同，在系统中是允许出现这样的情况出现的，满足函数重载的条件有：（1）函数在同一作用域下，即这些函数存在于同一个源文件中；（2）函数的名称相同。（3）函数的参数列表中的参数类型不同，或是参数的数量不同，参数的排列顺序不同。
              注意实型于整数型，以及子母型与字符串型的区别，千万不要想要调用实型，却将参数写成整数，因为加入另一个函数是整型，可能会引用错函数。还有一点，函数的重载不可以用返回值进行区分，即使返回值是不同的数据类型。
                         注意事项：（1）引用作为重载的条件时：常量引用与引用被区分为两种类型，可以进行重载。


四、职工管理系统
1、管理系统的需求：公司职工分为三类：普工职工、经理、老板，显示信息时需要显示职工编号、姓名、岗位以及职责
2、职责：普通员工：完成经理交给的人物
              经理：完成老板下达的任务并派发给员工
              老板：管理公司所有事务
3、功能实现要求：（1）退出管理系统
                           （2）增加员工信息：实现批量增加职工功能，将信息录入到文件中，职工信息为：职工编号、姓名、部门名称
                           （3）显示员工信息：显示公司所有职工的信息
                           （4）删除离职职工：按照编号删除指定员工
                           （5）查找职工信息：按照编号或者姓名查找对应职工的信息
                           （6）修改员工信息：按编号修改员工的个人信息
                           （7）按照编号进行排序：按照职工编号、进行排序，排序规则由用户指定
                           （8）清空所有文档：清空文件中的所有信息
4、
                                        

