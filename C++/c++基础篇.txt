	一
0、VS的快捷键：
1 在多个文件中存在main时则不能运行程序，因此要在main之间进行区分，例如可以将其中一个改成main1，此时便可以运行
2 在书写程序时可以在前面加入如下格式
#include<iostream>
using namespace std;其作用是使可以进行输入与输出。
3 cout<<"要写的东西”<<endl;
  此处的cout的意思输出，在输出汉字或其他非英语的语言时要加“”   否则无法进行输出，而英文的字符则不需要加


二
/符号表示单行注释，此行后的内容系统并不会运行而是直接进行输出
/* */此符号表示在两个*中间输入能容会直接进行输出，因此可以进行多行注释。

三
 1 在进行（define 常量 定义）时在定义的后面不能加；
 否则在进行常量输出时会出现错误
  如果是用const进行常量定义是则需要加

 2 对常量进行定义时有两种方法
 define 常量（要定义的常量） 定义（对常量要进行的定义），注意此式子不能放在int main（）{}中，否则会报错。
 const int 变量=定义
  此处的常量定义其实实在变量定义的基础上进行变更，即把变量变为常量

  3如果在int前没有加入const则后边的为变量，可以赋予不同定义，但系统会优先取定后定义的，加入的话则不行，会报错（因为此时已经时常量，不能在进行更改）

五  对于关键字的应用
  1在对于常量或者变量进行定义时不能使用关键字，如int；如果使用的话会出现报错，原因是这些关键字已经被系统征用，相当于系统定量，不能够再被定义。
  常用的关键字在手机相册中。
   2在进行定义时，定义量的使用只能时数字，若要进行对于字母的定义可以参考九的字符变量

六  对于常量和关键量的标识符的命名注意事项
  1标识符不能是关键字
  2标识符只能是字母，数字，下划线（_），不能是其它，如汉字
  3标识符的开头不能是数字
  4标识符中的字母是区分大小写的，如a和A是不一样的，因为系统认为其是两个不同的符号，因此不能够识别。

七  数据类型（数据的大小）
  常用的整型数据类型有： 1 short（短整数型）
                  2 int（整数型）（最常使用到）
                  3 long（长整数型）
                  4 long long（长长整数型）
 其相当于对于数据选择了存储空间的大小，如果超过这个大小则会出现报错或者是强行更改为该数据类型的最大值，如int a=999999，输出时会被系统更改为1215752191（即int的最大数据           容量）

八 数据类型（整型，实型，字符型，转义型，字符串型，布尔类型）————只有使用相应的数据类型才能调动相关的数据
     1可以使用sizeof（数据类型）进行查看，其一般在cout的输出上，如cout<<sizeof（int）<<endl;既可以查看int类型的大小
     2实型：在定义含有小数点的数据时可以使用，共有两种使用方式：1、float 数据=定义（注意在定义时定义要在最后加f，原因是这样可以使得系统认为此为单精度）
                                                           2、double 数据=定义（双精度）
     3c++中整型与实型的区别：整型，即为整数
                           实型，可以进行小数的变量
     4注意，在进行实型输出的时候一般只能为6位有效数字，在之后的过程中可以进行变化。
     5科学计数法：在c++中想要表示10的多少次方可以表示为：任意整数e任意数，其含义为整数*10的任意数次方
      
     6字符变量（可以进行字母的变量）：1在对字符进行变量时要注意：1要使用单引号
                                    2在一个单引号下只能使用一个字符
                2字符的ASCII编号查看，可以先用一个变量或常量对字符进行代替，之后输出：cout<<(int)变量<<enl；此时既可以查看字符的ASCII编号，其原理时对于变量进行强制更改为整型方式进行输出
                           3对于字符进行变量可以直接用字符的ASCII编号，此时便可以不用单引号；例如，char z=97
                           4在系统中并不是把字符直接放在储存空间中，而是把其ASCII放在储存空间中
                           5字符型变量的标准形式：chr 变量名称=‘字符‘
     7转义字符（可以表示一些不能显示出来的ASCLL字符），现阶段可以学的有：换行字符，在输出命令的内容后加入\n，与在之后输入<<endl的效果相同
                                                                                                                    水平制表字符，在输出命令的内容后加入\t，在\t后面可以输出之后要输出的内容，其产生的效果为\t前后的内容之间会出现间隔，例如，cout<<"hello world\t我的朋友“<<endl；从而实现多段输出内容的对其
                                                                                                                    反斜杠字符，在输出”\"时在前面要加上\，表示要输出特殊的字符
                                                                                                                    回车字符，在输出命令的内容后加入\r,在\r之后的内容会出现在本行行首，如cout<<"llow world/rhe"<<endl;会输出heow world，即会出现/r后的内容会替换开头的两个字符或一个汉字
                                                                                                                    退格符，在输出命令的内容后加入\b，产生的效果为\b的前一个字符会被删除，注意此效果生效的条件为在\b后要有内容否则其不会生效
      8字符串型（用于表示一串的字符，此字符不只限于字母，也可以时其他语言）：（1）通常有两种方法，C语言的方法：char 变量[]=“字符串”
                                                                                                  c++的方法：string 变量=“字符串”
                          此种方法相当于用一个变量去代替文字量较大的字符，从而使得其在之后的多次输出中代替，减少工作量
                           （2）字符串常量是可以使用加法的，即可以将两个字符串连接为一个字符串，两个字符串可以存在一个常量字符串
                           （3）字符串同样可以进行比较，其遵循ASCLL的字符顺序进行比较的，且只比较首字母，按照26字母表的顺序进行排列，如a<b,同时大写字母一般都大于任意的小写字母
                           （4）字符串的替代：有两种方式进行替换，一种是字符串名[要代替的字符位置（每一个字母代表一个单位）]=“修改后的样式”；另一种是字符串变量.(0,1,“修改后的字符”),这里分别代表的是要修改字符的位置，长度（有几个要修改的字符,“修改后的内容”）
                    （5）字符串类的特性：查看大小size（字符串名） 也可以是字符串名.length()
                                                           产看容量 字符串名.capacity()
                                                           查看是否为空 字符串名.empty()  
          9布尔类型（用来代表真和假），其一般的表达式为：bool 变量=true（本质为1）    其一般的用途为判断式中进行运用
                                                 bool 变量=false（本质为0）
          10值得注意的点，在不同的数据类型存在一些相同的点，在除了字符类型和字符串类型的其他数据类型中可以通过单引号去加定义此数据类型外的字符，如整数型，int a='m'
          11数据的输入，首先对于定义一个变量（随意的不论什么类型），再通过以下形式进行输入：cin>>变量；此时便可以进行变量的输入。
九 算数运算符
    1基本单位：加法  +
             减法 -
             乘法 *
             除法  /
    2进行运算的方式，先进行变量的定义，再在输出的时候对于两个变量机型加减乘除，例如，int a=10；
                                                                              int= b=3；
                                                                              cout<<a/b<<endl;
    3注意事项，在进行除法运算的时候，如果除数与被除数皆为整数，则输出的结果依然为整数，不会出现小数。
                                         在c++中进行算数运算时遵守数学规则，如零不能作为除数
    4取模（取余数），在系统中可以通过%来进行取余，同时要注意的一点是带有小数的数相除不能取余，例如，int a=20   int b=6   cout<<a%b<<endl;然后就可以得到2这个余数了
                                  如果被除数小于除数，则余数依然为被除数。如果被除数为0，则余数依然为0，0不能作为除数
    5递增递减：1根据种类可以分为：1前置递增：变量=++/--数字，两者的区别在于前置递增是优先进行递增再进行表达式的运算，后置则与其相反。例如，int a=20；
                                                                                                                                 a++*30；此时输出的结果为601
                                                                                                                                                                                                                             int b=30；
                                                                                                                                                                                                                             ++b*10；结果会是310；  
                                                    2 后置递增：变量=数字++/--                                                                         
                                                                                                                    
              2需要注意的是递增递减符号出现的位置要在紧贴等号的数字前后，否则会报错；还有如果要注意的一点：float a=3.1415
                                                                                                   int b=a+5；此时输出的b是会显示为8，而非8.1415，这是因为整形
                                                                                                                                                                          只能定义整形
      6赋值运算符：其共用5种符号，即加、减、乘、除、取模（取余），例如，int a=20；a+=2；其意思为a加上2，同时小数也可以。
      7数字的大小比较：其共有六种符号，即等于（==），不等于（！=），大于（>）,小于（<）,大于等于（>=）,小于等于（<=）
                                    注意在进行比较的时候要加括号，例如，int a=3,；int b=4；cout<<(a>b)<<endl;其输出的结果为0，4大于3，系统判断此为错误的大小比较，因此输出0，在c++中0代表错误，1代表正确
      8逻辑运算符，共有3种符号：！（感叹号）非，如！a ，带来的结果是如果a为真，则！a为假，反而反之。
                                                    && 与，如a&&b，带来的结果为a与b同时为真时，结果为真，如果其中一个不为真，则为假。
                                                    ||或，如a||b，结果带来如果a与b其中一个为真，则结果为真，全假时为假。在c++中一般认为除0外的所有数都为真，0为假
                   使用的注意事项：在其使用在if语句中是逻辑运算符应当放在括号内，而不是括号外，例如，if（a>15&&b<25）{cout<<"正确"<<endl;}；而不是if（a>15）&&(b<25)
           在&&中，编译器会首先判断条件一为正确，再去判断条件二，而在||中则是在第一个判断为错误时，才会去判断第二个条件。
           9二进制下的逻辑运算符：（1）符号:“&”，“|”
                           （2）用法：&，有0则为0，|，有1则为1
                                                                例如，int a = 5; // 二进制：0101
                                           int b = 3; // 二进制：0011

                                           int result = a | b; // 对每一位进行逻辑或操作
                                           System.out.println(result); // 输出：7  二进制：0111

                                              

十、数据选择结构（正片开始）
      1、顺序结构（上面所学的皆为顺序结构）：依照代码进行逐步的运行
      2、选择结构：（1）单行if：形如if（条件）{条件满足时执行的程序}，值得注意的是if（条件）后不要加“；”如果添加其代表的意思是在满足if条件后什么也不做，且会继续执行之后的输出代码
                  （2）多行if：在（1）的程序后，编写else{不满足条件时的内容}即可，当然也可以用另一个与第一个相反的if条件判断
                  （3）多条件判断：在（1）的程序后，输入else if（条件）{满足条件时输出的结果}，意思是在第一个条件未满足的情况下进行的二次的条件判断，可一直延续。

      （4）嵌套的if语句：即在if条件语句的前提下再进行一次if判断，如if（判断条件）{if（判断条件）}
      （5）三目运算符：其格式是，判断式？选择一：选择二，即利于判断式进行选择，如int a=20；int b=30；a>b?a:b；此时其输出的结果为30，这段代码的意思是，判断a>b是否正确，当正确时输出a，当错误时输出结果b。
                                    其也可以在cout输出时去应用，但此时要加（），否则编译器会无法识别。            
      （6）switch语句：其作用是执行多分支语句，例如，Switch（变量或常量）{case 对于变量的要求：符合条件后要输出的内容；break（这里break的作用为使程序在此停止，否则会出现在多个case的情况下，其会顺序输出所有内容）；default：要输出的结果（这里的default表达的意思是在变量或常量不符合所有的case条件时，统一输出的结果）}。
                       其存在的缺点是只能进行整形或字符型的选择判断，不能判断区间。
      （7）cctype头文件：用于进行字符的判定，例如，要对a是否是字母进行判定，则需要调用cctype头文件，否则会报错。
十一、循环结构：（1）while语句：格式while（判定循环能否进行的条件）{循环的代码}，注意尽量避免死循环。例如int a=0；while（a<10）{cout<<c<<endl;c++}。在此程序中要注意的是a<10而不是a>10,因为while（）括号中的是判断是否符合循环条件，如果是a>10，在一开始a=0，不符合循环条件，其会直接结束循环，要特别注意。
                                        
              （2）生成随机数的方法：rand（）%输入范围；如a=rand（）%100;表示的是生成0到99的随机数（注意范围中不包括最大最小值，即0和100），并且是a等于这个随机生成的数。             
                               （3）do while循环：与while循环很类似，其形式为；do{要循环的代码}while（条件）。其与while循环最大的不同点在于while循环会先判断是否符合条件，在去执行程序，而do while循环则是先执行完一遍do{}中的程序，再去判断是否符合条件，也就是说其至少会执行一次程序。
                                                               要注意的是不要把while写do{}中去了。
                                （4）for循环：基本格式：for（起始表达式；条件判断；末尾循环体）{循环语句}；例如，要去输出0到9，可以编写for（int a=0；a<10;a++）{cout<<a<<endl;}
                                         值得注意的是，起始表达式可以写在for循环前面，此时可以将第一个分号前面空着，条件判断可以现在{}内，此时可以空掉分号中间的条件判断，末尾循环体同理。由此不难看出相较于前两个循环，for循环的结构更加清晰明了。
十二、数组（相当于一个集合，里面存放着相同的数据类型）
       1、特点：     （1）数组中的每个数据元素都是相同的数据类型。
                     （2）数组是由连续的内存位置组成。
                     （3）可以只给部分元素赋值，且优先给前边的元素赋值。
                     （4）如果没有对数组的任何元素赋值，则所有数组中的元素值都为0。
                     （5）不能给数组的整体赋值。
                     （6）数组的下标或者是索引是从0开始的。
                     （7）数组的缩写为arr，一般将数组名起为arr。
       2、一维数组的三种类型：数据类型 数组名[数组长度]
                         数组类型 数组名[数组长度]=[值1，值2，值3...]
                         数据类型 数组名[]={值1，值2，值3...},这个数组名后的[]是必须要填加的，否则相当于没有进行数组长度的定义。
    3、一维数组名：(1)数组中的每一个元素占用的内存大小为4，数组的大小与其包含元素的多少有关，求数组中含有多少个元素，先假设数组名为arr，可以用cout<<sizeof(arr)/sizeof(arr)[任意一个其中的元素]<<endl;
                  (2)获取数组的首地址，直接cout<<arr<<endl;(假设数组名为arr)，注意的一点是输出的结果为十六进制，想要转为十进制，可以这样写cout<<(int)arr<<endl;
                                   上面的是查看数组的首地址，但是想要查看元素的首地址，则需要再前边加上&,例如，cout<<&arr[1]<<endl;即可查看arr数组中元素二的首地址，有一点值得注意，数组的首地址与其第一个元素的首地址是一样的，因为首地址，首地址，必然是第一个元素的地址。
                  （3）数组名是一个常量，不能在进行赋值。
                              （4）冒泡排序：对于混乱的数组进行有序的排列，其基本思路为，首先，将相邻两个数组元素进行大小对比，如果第一个比第二个大就进行交换，对每一对相邻数组进行比较，即进行循环；最后对于这个循环整体在进行循环，不过要对于内循环的循环判断条件进行减一（这样做的理由是可以减少不必要的重复比较，因为第一次内循环，已经将最值找出，再去找第二个的时候，没有必要再去找第一个去比较） ，例子如下：       
#include<iostream>
using namespace std;

int main() {
	int arr[] = { 2,5,4,9,7,1,6 };
	for (int j = 0; j < 6; j++) {
		int temp = 0;
		for (int i = 0; i < 6-j; i++) {
			if (arr[i] < arr[i+1]) {
				temp = arr[i];
				arr[i] = arr[i+1];
				arr[i+1] = temp;
			}
		}
	}
	for (int k = 0; k < 7; k++) {
		cout << arr[k] << endl;
	}
	system("pause");
	return 0;
} 
这里如果想要从小到大排，就把内循环中的判断条件中的小于号换为大于号就可以进行排序调换，或者大小号不变，把arr[i]与arr[i+1],但对于条件判断中的内容进行调换，则没有用，为什么你可以想一下。
         4、二维数组：在一维数组的基础上再加一个维度。
                    （1）类型：数据类型 数组名[元素的行数][元素的列数]；数组名[行数][列数]=数值；
                                     数据类型 数组名[行数][列数]={{元素一，元素二...},{元素三，元素四...}}  //这里要注意将不同的元素扩在不同的花括号，代表的是每一行所含有的元素，如果没有填满，空的会默认为0.
                                     数据类型 数组名[][列数]={元素一，元素二，元素三...}    //这里与二的区别在于此种形式会从第一行第一列进行按顺序排列，其与剩下的会默认为0. 
                                                                                                                                       其中必须要有列数
                                            一般会用第二种，因为更加直观
                                  （2）二维数组数组名：二维数组的大小分别为：其中的一个元素所占的内存空间大小4（大小与数据类型有关），与整体所占的大小等于其元素大小的和。 注意的是整体的元素大小只与行列有关，不与其中是否有修改的元素数量有关。查看每一行的大小，可以通过在arr后加[行数]得到行数的大小；
                                                                   二维数组的行数求法：sizeof(arr)/sizeof(arr[0])
                                                列数求法：sizeof（arr[0]）/sizeof(arr[][])
                                      二维数组的首地址的求法与一维数组保持一致。
十三、函数（加油，基础进行一大半了）（写好一段函数，在之后需要反复出现相同类型的式子时，方便直接用函数进行调用）
        1、函数的定义：无论是哪一种函数其都包含如下几个部分：（1）返回类型（2）函数名 （3）参数列表：使用函数时传入的数据 （4）函数体语句：函数内需要执行的语句 （5）return表达式：与返回值类型挂钩，函数执行，返回相应的数据。就拿main函数举例，其表达式如下：int main（）{system（“pause”）；return 0}这里的int为返回类型，main是函数名，（）是参数列表，这里由于其为入口函数，所以可以为空值，花括号中的system（“pause”）是函数体语句，return 0是return表达式。
        2、函数的调用：先编写一个函数，再在其它地方去调用这个函数，调用时要加函数名，与实参例如：
#include<iostream>
using namespace std;

int add(int num1, int mun2) {
	int sum = num1 + mun2;
	return sum;
}
int main() {
	int a = 30;
	int b = 40;
	int c = add(a, b);            //这里参数列表不用num1与mun2是因为，在编写加法函数时，num1和mun2为“形参”没有实际的值；而a、b则是与num1与mun2是相同数据类型的
                                                                 //数据类型，因此作为“实参”可以代替掉形参。                    
	cout << c << endl;
}
这个例子中创立了加法函数，在入口函数中对c进行赋值是调用加法函数。其原理是a、b相加的sum值，函数再返回为sum值，最后使c=sum。
          3、值传递：将实参返回给形参，如果形参发生改变，并不会影响实参。
                           例如：
#include<iostream>
using namespace std;
void sum(int num1,int num2) {
	cout << "num1的值为" << num1 << endl;
	cout << "num2的值为" << num2 << endl;
	int temp = num1;
	num1 = num2;
	num2 = temp;                              //这里形参num1与num2进行了调换
	cout << "num1的值为" << num1 << endl;
	cout << "num2的值为" << num2 << endl；        //注意这里不需要返回值，因为没有返回值
}
int main() {
	int a = 20;
	int b = 30;
	
	sum(a, b);                   //num1与num2被分别赋值为a与b，采用函数后，num1与num2进行了调换，即形参值发生了改变
	cout << a << endl;           //这里输出的结果依然为a、b的原数值，此处可以看出即使num1、num2发生了变化，但是赋值给其的a、b并没有受到影响
	cout << b << endl;

}

          4、如果不需要函数的返回值时，则不需要在函数名前确立数据类型，而是输入void，代表无类型，从而无返回值。注意最后还是要写return，但是后面一定不要输入任何数值，直接加分号。        
                                            
      5、函数的常见类型：（1）无参无返，（2）有参无返，（3）有返无参，（4）有参有返（这一类调用函数，对一个变量进行赋值时，函数中的输出会照常运行，变量所被赋予的值为函数的返回值）
          6、函数的声明：其最主要的作用为当编写的函数再main函数之后时，为了在main函数中调用编写函数，因此需要先告诉编译器存在这个函数，例如，编写了一个比较函数，但它在main函数之外，因此需要在main函数之前，写一段int num（int a，int b），即需要在main函数前写编写函数的除了函数语句之前的内容。注意声明可以多次，但函数定义只能一次。
           7、函数的分文件调用：作用：为了避免所有的代码都集中在同一个源文件中，导致代码冗杂。
                                             方法：建立一个头文件，将函数声明写在头文件中，再创立一个源文件，从而在要编写的文件中进行调用。在创建头文件时可以看到第一行有pragma once，这个是为了避免一个头文件被多个源文件进行include嵌套。造成多个源文件不能稳定运转。函数的头文件与源文件建立联系是通过在函数定义的源文件的第一行写#include"函数声明的头文件”后面不加分号，注意在函数声明的头文件中要加#include<iostream>,如果不这样会导致函数定义的源文件无法进行输入与输出。


十四、指针（很重要的部分，一定要学扎实）
         1、（1）通过指针间接访问内存。
            （2）每一个数据都会占用一定的内存，可以将其理解为起算占有的房间，而想要访问这些房间，自然需要钥匙，钥匙可以分为两种，一种是直接通过变量名进行访问，另一种是通过地址来进行访问，而这个地址就是所说的指针，非常的形象。而如果有一个变量专门用来存储另一个变量的地址，则这个变量称为指针变量。一般情况下都将“指针变量”称为“指针”
         2、创建指针以及使用指针：创建方法：指针类型*指针名称（这里的“*”不能省略），其与数据建立联系的方式，先假设指针名称为p，则p=所需数据的地址（必须用十六进制，可以在数据前加一个&来查看），这里可以直接将在指针名称后确定指针所指向的数据地址。使用指针的方法是在指针前加“*”代表解引用，找到指针指向的数据。同时可以通过指针对于数据进行修改，就相当于*p即使该数据，注意指针不能被直接赋值，且在指针的类型必须和所指数据的类型保持一致，就算是整型和实型也不可以。
         3、指针的大小：可以分为两种情况来分析，第一种是指针本身占多大内存空间，在32位操作系统下，指针本身的内存大小为4，64位操作系统则占的内存大小为8，如果使用的是解指针的话，则与所储存的数据类型有关。
         4、空指针：指针变量指向地址编号为0的空间。
                                  初始化指针变量；注意空指针指向的变量时不可访问的。1~255之间的内存是系统占用的不可以访问。
                                  作用：在使用一个指针的时候要先指向编号为0的空间，这样做可以避免在使用指针的时候出现错误的话，不至于会出现连续型的错误，且可以避免野指针地址随机带来的危害。
                                  用法：在命名一个指针的时候先不要直接指向变量，而先将其指向0编号，编法是int*a=NULL，再进行指向。
                5、野指针：指向一段非法的内存空间。
                                 产生的3种原因（1）没有给指针赋予一个初始值
                                             （2）指针所指向的变量已经释放或删除
                                             （3）指针所指的变量已经超过了生存周期
                6、const修饰指针：（1）指针常量，其最主要的特点是指针指向的值可以修改，指针的指向（地址）不可以修改，可以减少指针指向错误内存地址的风险。例如，
#include<iostream>
using namespace std;

int main() {
	int a = 10;
	int b = 20;
    int *const p = &a;
	*p = b;
	p = &b;                //这里会报错，因为指针的指向不可以变化
	cout << *p << endl;    //值发生了改变
        cout << p << endl;
        cout << &a << endl;    //最后这两行输出的值一样，即首地址是一样的。
}
                                 （2） 常量指针，其最主要的特点是指针指向的值不可以修改，指针的指向（地址）可以修改。例如，
#include<iostream>
using namespace std;

int main() {
	int a = 10;
	int b = 20;
    int const* p = &a;
	*p = b;                   //这里会报错，因为编译器认为该指针的值为常量不可以在对其进行修改，可以理解为*p相当于常量10这个值，不能修改
	p = &b;                   //此处修改了指针的指向，此时指针的指向发生了变化
	cout << *p << endl;       //此时去输出指针所指向的值可以看见已经变为了20，原因是指向发生了变化，因此其指向的值发生了变化，类似于钥匙变了，能打开的房间就变
}
                                  区别：使用的场景不同，指针常量可以理解为是指针，但它指向一个常量，因此你可以使用它来指向一个常量并且防止修改常量，常量指针可以认为是一个不可以修改的指针，并且可以只想不同的变量
                                            （3）这两者有一点需要特别的注意，常量指针是可以指向常量的，而指针常量则是不可以的，原因很简单，常量由于不可以更改，而指针常量是可以更改指针数值的，而常量指针则与之相反，因此可以指向常量。                                                                                                                                
         7、指针与数组：（1）利用指针去访问数组中的元素：将数组名作为指针的指向，具体的例子如下：
#include<iostream>
using namespace std;

int main() {
	char arr[3] = { 'a','b','c'};
	char* p = arr;                       //指针指向数组
	p++;                                 //对于数组本身进行加法，可以增加数组的字节，因为去指向数组的时候其指向的数组的首地址，而进行加一操作即可访问后面的元素
	cout << *p << endl;                  //当然也可以加不同的数进行定位
} 

                       （2）二维数组与指针：指针指向二维数组的方法：数据类型（*指针名）[列数]；这里的列数要与数组保持一致；然后是指针名=数组名。输出时要指针名后加[行数][列数]，即可运行。
               8、指针与数组：（1）地址传递：与值传递类似，具体如下：
#include<iostream>
using namespace std;

void a(int*a, int*b);                   
int main() { 
	int e = 10;
	int f = 20;
	a(&e, &f);                       //在使用函数时输入数值的地址，而不是其本身，使得函数中的指针能够获得指针对象
	cout << e << endl;               //与值传递最大的不同在于实形本身也发生了改变，这主要是因为指针指向的是其地址，只要地址交换，存在地址中的数值也会一起转移
	cout << f << endl;
}
void a(int*a,int*b) {                    //这里的参数列表中的是两个指针，而不是数。
	int temp = 0;
	temp = *a;
	*a = *b;
	*b = temp;
	

}    

十五、结构体
    1、结构体的基本概念：属于用户自定义的数据类型，用于存储不同的数据类型，相当于是一个数据类型的集合。
    2、构建一个结构体的语法：struct 结构体名  {成员列表}
  3、创建一个结构体变量的方法：（1）struct 结构体名 变量名；再给变量属性进行赋值，例如：
#include<iostream>
using namespace std;

struct feiwu {
	string feiwuming;
	int age;
	float biaoxian;
};
int main() {
	feiwu i;
	i.age = 19;
	i.feiwuming = "毛振宇";                              
	i.biaoxian = 10;
	cout << "废物名:" << i.feiwuming << endl;
	cout << "废物年龄:" << i.age << endl;
	cout<< "废物表现:" << i.biaoxian << endl;}
                                 （2）struct 结构体名 变量名={对成员进行不同的赋值}，例如：
#include<iostream>
using namespace std;

struct feiwu {
	string feiwuming;
	int age;
	float biaoxian;
};
int main() { 
	feiwu j = { "sb舍友",19,10 };
	cout << "废物名:" << j.feiwuming << endl;
	cout << "废物年龄:" << j.age << endl;
	cout << "废物表现:" << j.biaoxian << endl;
	system("pause");
	return 0;                  (3)在构建结构体的时候顺便定义结构变量，例如：
#include<iostream>
using namespace std;

struct feiwu {
	string feiwuming;
	int age;
	float biaoxian;
}p;                                 //结构体变量名跟在定义结构体后面
int main() {	
        p.age = 19;
	p.biaoxian = 10;
	p.feiwuming = "我的沙比舍友";
	cout << "废物名:" << p.feiwuming << endl;
	cout << "废物年龄:" << p.age << endl;
	cout << "废物表现:" << p.biaoxian << endl;
}  
       4、结构体数组：从上一节可以看出如果用用基本结构进行命名的话，则会非常的麻烦，这是便可以使用到结构体数组。
                                 （1）创建的语法：，先创立一个结构体，struct 结构名 数组名[元素长度]={{具体内容}，{具体内容}} 
                                 （2）修改结构体数组中的元素赋值：数组名[要修改元素的序列数].结构体中数据类型=修改内容
                                 （3）在输出时要注意是cout<<arr[0].age<<endl;其中的.age是必须要加的，不加其会报错。
            5、结构体与指针：可以利用指针来进行调用。
                                       方法：首先创建一个结构体，然后创建一个机构体变量，用指针去调用变量。输出的时候去输出结构体中的具体数据类型，则是指针名->结构体中的某一数据类型
            6、嵌套结构体：首先创建一个结构体，再创建一个结构体，但在第二个结构体中输入第一个机构体的首行，之后在创建结构体变量时对其一一赋值即可
            7、结构体做函数参数：（1）值传递：首先先创建一个结构体，然后创建一个函数，在函数的参数列表中输入 结构体首行，之后在main函数中创建一个结构体变量，将结构体变量的首行输入进函数的参数列表中，即可进行使用。形参的值并不会改变实参的值                     
                          （2）地址传递：创建一个结构体，然后创建一个函数，在函数的参数列表中输入struct 结构体名*p，之后在main函数中创建一个结构体变量，将机构体变量的地址输入到函数的参数变量中，即可进行调用。形参的值改变实参的值。
           8、结构体中的const使用场景：从上边的内容可以看出，每一次调用结构体，其都会拷贝一次结构体变量，但是这样非常占用内存，导致运行速度慢，这是如果用指针的话，可以大大减少内存的占用，节省内存空间，因为不管结构变量有多大，但是其地址只占4个字节。但是这样会出现一个问题，由于结构体指针中形参会改变实参，因此这时可以在创建函数时，在参数列表中的指针前加入const，此后在函数中若出现对结构体内容进行修改，编译器会报错，防止误操作。                                   